多态: *  多态的存在有3个条件，1)要有继承
      *  2)要有重写
      *  3)父类引用指向子类对象:
       *


继承 :多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承那个类即可。

    多个类可以称为子类，单独这个类称为父类、超类或者基类。

    子类可以直接访问父类中的非私有的属性和行为。

    通过 extends 关键字让类与类之间产生继承关系。

    A extends B , C extends A;

封装  :

     1. 可以对成员变量进行更精确的控制。

     2. 隐藏信息，实现细节。

抽象   :我们不能实例化一个Employee类的对象
    ，但是如果我们实例化一个Salary类对象，
    该对象将从 Employee 类继承7个成员方法，
    且通过该方法可以设置或获取三个成员变量。
    抽象方法没有定义，方法名后面直接跟一个分号，而不是花括号。

类    :类是一个模板，它描述一类对象的行为和状态。

对象  :对象是类的一个实例，
有状态和行为。例如，一条狗是一个对象，
它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。

实例  Java 实例 – 字符串比较

方法  : 方法是解决一类问题的步骤的有序组合
       方法包含于类或对象中
       方法在程序中被创建，在其他地方被引用

重载  : 方法名相同
       方法的参数类型，参数个不一样
       方法的返回类型可以不相同
       方法的修饰符可以不相同






接口和抽象类的共性和区别点:
一 接口和抽象类的相似性

1 接口和抽象类都不能被实例化，它们都位于继承树的顶端，用于被其他类实现和继承。

2 接口和抽象类都可以包含抽象方法，实现接口或继承抽象类的普通子类都必须实现这些抽象方法。

 

二 接口和抽象类的区别

1 接口里只能包含抽象方法，静态方法和默认方法，不能为普通方法提供方法实现，抽象类则完全可以包含普通方法。

2 接口里只能定义静态常量，不能定义普通成员变量，抽象类里则既可以定义普通成员变量，也可以定义静态常量。

3 接口不能包含构造器，抽象类可以包含构造器，抽象类里的构造器并不是用于创建对象，而是让其子类调用这些构造器来完成属于抽象类的初始化操作。

4 接口里不能包含初始化块，但抽象类里完全可以包含初始化块。

5 一个类最多只能有一个直接父类，包括抽象类，但一个类可以直接实现多个接口，通过实现多个接口可以弥补Java单继承不足。


